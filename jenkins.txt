instanc creation in aws (region should be correct like for the oregano)
------------------------
open aws>EC2(virtual machine)>launch instance>selec ubuntu>

create key pair >rsa and select .ppk(putty)>create
network > allow https and all then launch instance

once success> select instance id navigate to instance>
wait for instanc to run state> select the instance> then click on connect>

it will open connect page he for learning ued the public ip
then launch the instance>then black terminal will open
means all good

now setup jenkins in the machin terminal
steps: 
sudo apt install openjdk-17-jre -y
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
 
echo 'deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/' | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
 
sudo apt-get update && sudo apt-get install jenkins -y
 
sudo service jenkins restart
 
 sudo systemctl status jenkins

 then will get the active(running) in green color like below

 ubuntu@ip-172-31-27-178:~$ sudo systemctl status jenkins
● jenkins.service - Jenkins Continuous Integration Server
     Loaded: loaded (/usr/lib/systemd/system/jenkins.service; enabled; preset: enabled)
     Active: active (running) since Tue 2025-06-17 04:40:10 UTC; 25s ago
   Main PID: 4197 (java)
      Tasks: 42 (limit: 1124)
     Memory: 275.6M (peak: 290.7M)
        CPU: 16.666s
     CGroup: /system.slice/jenkins.service
             └─4197 /usr


go back to instance page select instanc id>
there new page open > select security tab> u should see the port 8080>
if not select the security group>edit inbond rule>
add custom with 8080> move back to the instance
below u will get public ip open it make it http and add :8080 in end u will see the login session

run the below cammand in terminl, 
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

copy the Password and paste in the login page
Password will be like this : 089905353a7f4c6db4543767233d9520

then paste it in the jenkins login>continue>
then u see the customize jenkins setup screen

u will see install suggested plugins or select plugins to install

select suggested and wait for installation
once done create first admin 
kokilagowda123
Kokila@13
socgen email

then instance confi page will give the jenkins url:
http://44.248.96.164:8080/

the save and finish

then u will get jenkins is ready 
click on start using jenkins

then u should see the jenkins dashboard

jenkins dashboard:
new item
enter item name, for first time freestyle for first time and okay
config page will open
description:
purpose of pipeline like a summary so other can understand
checks:
1. discard old build: pipeline if we re run it will create a new log, to aviod that
 we can check this to discard old builds. 

2. github project: in github we have project if we want to itigrate it we can use it.
3. This project is parameterized: when we need user input while running the p manually
4. throttle builds: used to expertise the build not preferable
5.execute concurrent builds in necessary: to run multiple p parallally

we do have the advanced to select more

sources code mangement: (connet and manage ur code repository to automatically pull the latest code)
1. none(with in the pipeline we are storeing everthing and run it) ; no version controlling
2. or create a ps1 file and keep in github then call it in pipeline ; version controlling best options;

triggers: on wht condition this pipline should run.
1. triggers build remotely : writen a script and writting the condition using it u want to trigger this p using the script.
2. build afte other project are built: p1 should execute then p2 sould trigger that can we can use this trigger
3. build periodically: ur defineing the timeline and u want to run the scriot in perticular time like corn(pattern we have to give).
4. github hook trigger for GITSc, polling: in github will create webhook and attach it here, then it will trigger with help on webhook trigger
5. poll SCM: 

Environment:
we can set env here
1. Delete workspace before build starts: fresh installation of folder
2. use secret texts or file: we have the options to keep secret and consume
3. console outpu:
4.
5. terminate a build it it stuck:

build steps:
similar to git actions we can add the steps like yaml file like how we did it in git
it will have shell terminal and accept command

post build:
once build complete we can do the available then apply

then pipline will be start

created my first pipeline then select build now
once build started then u can see the console output there
i should see the hello world!

currently we have one machin that we created that is master machine
but in org we wont do the changes directly in master that setup handled lastExecVersion

modify p1
go to dashboard > config> do the changes> then build and see the log> everytime new build will be triggered



second item p2:
select pipeline, there u will have pipelinescript
side dropdown, 3 options are there select hello world
1. it will give script:
pipeline {
    agent any

    stages{
        stage('hello'){
            echo ()
        },
        stage('bye'){
            stop()
        }
    }
}

2. git + maven : declarative will start from pipeline,
3. node: will be scripted where will see node in start not pipeline

setup tools:
dashboard> manage jenkins> tools> need to define a path where the application resides
we selected maven so name of the maven present in script should be added in tools
and save it.
then run the build it will be success
we will get the jar file
that jar details will be added i pom.xml file from where we are getting the source code ex: git url https://github.com/jglick/simple-maven-project-with-tests.git



once build we can run based on the stages also
select stages whcih we want to run.
pipeline steps: will give the brif of he process



better way:
using git so we can manage the version
so instead of adding script in jenkins
will create new file called jekinssfile paste the sample file 
merge the code, copy the repi link >come back to jenkins>
Definition select SMC in this selec git> we need to fill the proper details>
like url ,branch name and all 
script path should be exact match 
so this will make sure any changes are there then we can hangle in git a good version control.

if private repo:
add the credentials, bcs repo path will give error
domain< gloabl credentials
kind : username and pass or Github app
ID: github1 (should be unique in j env)
des:
appid:
key: pat token we need to add
for pat > go to github progile> settign> developer setting>
create new pat token, personal access token>classic> classic>
add note, and generate the code
copy the token and in above jenkins path.
if we get no valid crumb
try command or try to resolve the issue

Go to: Manage Jenkins → Configure Global Security
Uncheck ✅ "Prevent Cross Site Request Forgery exploits"
 

 using git webhook> use jenkis url/github-webhook/> go to jenlns in account secute
 > [paste the secret] 11eb63e9c9eaa716be34cf9adfa664efac > disable ssl for public> then select the event>
 then add.
 if hook not triggered in jenkis add a github integration pulgins in jenkis manage jenkins > pulgins> available> install> restart the jenknis serevice



=====================================================
if any issue in login:
try below 

sudo rm /var/lib/jenkins/secrets/initialAdminPassword

sudo systemctl restart jenkins
 
sudo systemctl status jenkins

 
sudo rm /var/lib/jenkins/secrets/initialAdminPassword

sudo rm /var/lib/jenkins/jenkins.install.UpgradeWizard.state

sudo rm /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion

sudo systemctl restart jenkins

 
sudo apt purge jenkins -y

sudo rm -rf /var/lib/jenkins

sudo apt install jenkins -y

sudo systemctl start jenkins

 
sudo systemctl stop jenkins

 
sudo vim /var/lib/jenkins/config.xml ---> find for usesecurity then make it false
press 1 change the value ;wq then cat again run command it should be false
 
sudo systemctl start jenkins 

 