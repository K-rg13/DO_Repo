meeting Id: 3632579378949
pass: wJ9eP24q
=============================jatin trainer==============
day 1: git setup
day 2: jenkins
day 3: 
day 4:
day 5:

Devops: AWS not AZURE
version control: ex:github,
types of version control
1. centrilized(svn(tool), inazure(tfcv)) :the dev's cant clone repo into system, the user directly making changes on server/platform.
2.Distrubuted(git):it will help to clone repo in system to make changes and push it back to server.

advantages:
D:internet connection only required when interacting with server.
git is usfull incase bcs all dev's have a copy so backup is eazy
disAdv:
C: more secure than D one as it is in one place.
in C backup is difficult

about git and github:
---------------------
git is tool,
this will very helpfull reason most of the platform uses git tool commands.


github is a platforms/server which support the git tool and it helps to keep ur files and 
folders and also assist us to share the code with other people

its help git tool to perform,
ex: github, bitbuket,azure devops,teamcity,git lab
local: C:\Program Files\Git 
===> remove later
local: C:\Program Files\Git 
vscode: c:User\admin\Downloads\vs.... or C:\Users\admin\AppData\Local\Programs\Microsoft VS Code
global config


list of tools for session:

git:
https://git-scm.com/downloads/win>windows>standalone install first is good.
its independent, we can have it locally but this cannot be shared to others to do that
we are using github platform
steps:
local>newFolder>cmd>git init(.git will initialize)>new test file made changes>cmd>git add .>
git status>git commit -m "First commit">git log(till my in current branch who and what and all changes
made will be listed,it has commit id(its like a pointer)we can use it to revert the changes by picking only it)
1. github> creat new repo> fill the details and create> then follow the last two steps to link the repo remotly.
2. clone repo>in code cpy url>in local create new folder >open cmd>git clone <url>>then folder will be created locally..
git branchs:
main/master>will have a qa(for quality check), dev(where developer use to push code virtually), prod(actual app).

authenticate: git branch
https, ssh(more powerfull), one more===>
tags: suppose multiple commit in that only one versioni have to deploy to do that we use tag like, tag_V1
clone, fork and import deff:
c: cloning the repo in system
f: cloning the repo from github to github account> made changes in other repo by creating fork then create pr it will reflect in other place also.
I: import similar to clone using url we can create repo in gitapp
branch rules:
repo>setting>rules>there u will get list of rules choose>then create by authenticating.
note: for push,if the local has the new branch but not in repo for first time it will suggest --upstream to push the changes
Actios: its a ci/cd platform wich allow us to automate, the build deployment and soon.
steps:
1. setup from start
2. we can use the existing file in the action page.
=============================================================
terraform:
install: https://developer.hashicorp.com/terraform/install
extract> get the path and add in evn variable locally>open env variable select path in user and system> select new >paste the path> ok>
open the cmd> terraform --version

docker: https://docs.docker.com/desktop/setup/install/windows-install/ first
aws cli: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
putty: https://www.putty.org/





Devops ===> automation 
java --maven, ant,gradel
to generate package
like jar,war,ear
when we have to run maven command we have command in sequence not all can remember it.
to avoid this issue we have the git actions that will be automated with sequence of command.

development - run the code(more knowledge on code not server)
operations- team(more knowledge on server not code they dnt know about the commands that generated by dev's)

ci/cd process
---------------
so we will write one file: (ci continuous intergration)
then commands in a sequence
it called package/artifacts

(cd continuous deployment)
then operations team will run the package on the server
their own file
command to run the package on the servers


to do the ci/cd we need tool or platforms below.
1. git hub actions, yamal(lang)
2. azure devops, yamal(lang)
3. jenkins, 
4. teamcity
5. bitbuket
6. gitlab
using this tools we can do any type of automation
def: like price based on useage, jenkins is free but need to do some setup from our end.
